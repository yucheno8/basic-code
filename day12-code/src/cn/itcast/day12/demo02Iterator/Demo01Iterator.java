package cn.itcast.day12.demo02Iterator;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

/**
 * @author yucheno8
 * @date 2021/7/30/030
 **/

/*
    java.util.Iterator接口：迭代器（对集合进行遍历）
        有两个常用的方法：
            boolean hasNext()   如果仍有元素可以迭代，则返回 true。
                判断集合中还有没有下一个元素，有就返回true，没有就返回 false。
            E next()    返回迭代的下一个元素。
                取出集合中的下一个元素
    Iterator迭代器是一个接口，我们无法直接使用，需要使用Iterator接口的实现类对象，获取实现类的方式比较特殊
    Collection接口中有一个方法，叫iterator()，这个方法返回的就是迭代器的实现类对象
        Iterator<E> iterator() 返回在此 collection 的元素上进行迭代的迭代器。

    迭代器的使用步骤（重点）：
        1. 使用集合中的方法iterator()获取迭代器的实现类对象，使用Iterator接口接收（多态）
        2. 使用Iterator接口中的方法hasNext判断还有没有下一个元素
        3. 使用Iterator接口中的方法next取出集合中的下一个元素

 */
public class Demo01Iterator {

    public static void main(String[] args) {
        // 创建一个集合对象
        Collection<String> coll = new ArrayList<>();
        // 往集合中添加元素
        coll.add("姚明");
        coll.add("科比");
        coll.add("麦迪");
        coll.add("詹姆斯");
        coll.add("艾弗森");

        /*
            1. 使用集合中的方法iterator()获取迭代器实现类对象，使用Iterator接口接收（多态）
            注意：
                Iterator<E>接口也是有泛型的，迭代器的泛型跟这集合走，集合是什么泛型，迭代器就是什么泛型
         */
        // 多态 接口                实现类对象
        Iterator<String> it = coll.iterator();

        /*
            发现使用迭代器取出集合中元素的代码，是一个重复的过程
            所以我们可以使用循环优化
            不知道集合中有多少元素，使用while循环
            循环结束的条件，hasNext()方法返回false
         */
        while (it.hasNext()) {
            String e = it.next();
            System.out.println(e);
        }
        System.out.println("===================");

        for (Iterator<String> it2 = coll.iterator(); it2.hasNext();) {
            String e = it2.next();
            System.out.println(e);
        }
        System.out.println("===================");

        /*
        增强for循环
            增强for循环（也称for each循环）是JDK1.5以后出来的一个高级for循环，专门用来遍历数组和集合的。
            它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。
            它用于遍历Collection和数组。通常只进行遍历元素，不要在遍历的过程中对集合元素进行增删操作。
            使用方法：
            for(数据类型 变量名 : 容器对象) {
                循环体语句;
            }
         */
        // 增强for循环
        for (String s : coll) {
            System.out.println(s);
        }
        System.out.println("==============");

        // 使用增强for循环遍历数组
        int[] arr = {1, 2, 3, 4, 5};
        for (int i : arr) {
            System.out.println(i);
        }

        /*// 2. 使用Iterator接口中的方法hasNext判断还有没有下一个元素
        boolean b = it.hasNext();
        System.out.println(b); // true

        // 3. 使用Iterator接口中的方法next取出集合中的下一个元素
        String s = it.next();
        System.out.println(s);

        b = it.hasNext();
        System.out.println(b);
        s = it.next();
        System.out.println(s);

        b = it.hasNext();
        System.out.println(b);
        s = it.next();
        System.out.println(s);

        b = it.hasNext();
        System.out.println(b);
        s = it.next();
        System.out.println(s);

        b = it.hasNext();
        System.out.println(b);
        s = it.next();
        System.out.println(s);

        b = it.hasNext();
        System.out.println(b); // 没有元素，返回false
        s = it.next(); // 没有元素，再取出元素会抛出NoSuchElementException没有元素异常
        System.out.println(s);*/
    }

}
